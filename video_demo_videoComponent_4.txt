<template>
  <div ref="videoViewContainer" class="video-view-container" :class="{ 'default-view': !data.videoed}">

    <video v-if="data.videoed" ref="videoPlayer" class="video-js"></video>
    <div v-if="!isPlaying"  class="custom-play-button" @click="toggleVideoPlayback">
      <!-- 自定义播放按钮 -->
      <span :class="isPlaying ? 'fas fa-pause' : 'fas fa-play'">
        {{ isPlaying ? 'stop' : 'play' }}
      </span>
    </div>
  </div>
</template>

<script setup>
import {
  reactive, ref, onMounted, toRefs, watch, defineProps,
} from 'vue';
import { storeToRefs } from 'pinia';
import useVideoStore from '../pinia/useVideoStore';
import '../assets/video.css';

const props = defineProps({
  comment: {
    type: Object,
    default() {
      return null;
    },
  },
  videoId: {
    type: String,
  },
});

const videoStroe = useVideoStore();

const { playerLists } = storeToRefs(videoStroe);
const data = reactive({
  videojsObject: null,
  player: null,
  videoType: '',
  videoSrc: '',
  isPlaying: false, // 标记视频是否正在播放
  videoed: false,
  width: '',
  height: '',
});

const videoType = ref('');
const videoPlayer = ref(null);
const videoViewContainer = ref(null);
const { videoSrc, isPlaying } = toRefs(data);

const detectVideoType = (src) => {
  if (src.endsWith('.mp4')) {
    return 'video/mp4';
  }
  if (src.endsWith('.m3u8')) {
    return 'application/x-mpegURL';
  }
  return 'video/mp4';
};

const loadVideoJS = () => {
  if (!data.player) {
    data.player = data.videojsObject(videoPlayer.value, {
      autoplay: true, // 不自动播放
      controls: true, // 禁用默认控件
      width: data.width,
      height: data.height,
      sources: [
        {
          src: videoSrc.value,
          type: videoType.value,
        },
      ],
    });
    if (!playerLists.value.includes(videoPlayer.value.id)) {
      videoStroe.$patch((state) => {
        state.playerLists.push(data.player);
      });
    }
    data.player.on('play', () => {
      playerLists.value.forEach((player) => {
        if (player.id() !== data.player.id()) {
          player.pause();
        }
      });
      data.isPlaying = true;
    });
    data.player.on('pause', () => {
      data.isPlaying = false;
    });
  }
};

onMounted(async () => {
  videoType.value = detectVideoType(videoSrc.value);
  const { default: videojs } = await import('video.js');
  data.videojsObject = videojs;
  const { offsetHeight, offsetWidth } = videoViewContainer.value;

  data.height = `${offsetHeight}px`;
  data.width = `${offsetWidth}px`;
});

const toggleVideoPlayback = () => {
  if (!data.player) {
    if (data.videoed === false) {
      data.videoed = true;
    }
    return;
  }
  if (data.isPlaying) {
    data.player.pause(); // 暂停视频播放
  } else {
    data.player.play(); // 重新播放视频
  }
};

watch(() => data.videoed, (newValue) => {
  if (newValue) {
    loadVideoJS();
  }
}, {
  flush: 'post',
});

</script>
<style lang="less">
.video-view-container {
  position: relative;
  margin-bottom: 10px;
  &.default-view {
    width: 100%;
    padding-bottom: 56.25%;
    background-color: #000;
  }
}
/* 添加样式以定制自定义播放按钮 */
.custom-play-button {
  cursor: pointer;
  background-color: #000;
  color: #fff;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -50px;
  margin-top: -50px;
}
/* 添加悬停效果 */
.custom-play-button:hover {
  background-color: #333;
}

.video-js .vjs-big-play-button {
  display: none;
}
</style>
